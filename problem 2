;function definition
(define (sum-up-numbers-simple L )
  ;if the list is empty, display 0 
  (cond
   ((null? L) 0)
   ;test whether the values in the list are letters of the alphabet, if they are recursively call the function again with
   ;the remainder of the list using cdr
   ;test if the atom = a
   ((eq? (car L)'a) (sum-up-numbers-simple(cdr L)))
   ;test if the atom = b 
   ((eq? (car L)'b) (sum-up-numbers-simple(cdr L)))
   ;test if the atom = c
   ((eq? (car L)'c) (sum-up-numbers-simple(cdr L)))
   ;test if the atom = d
   ((eq? (car L)'d) (sum-up-numbers-simple(cdr L)))
   ;test if the atom = e
   ((eq? (car L)'e) (sum-up-numbers-simple(cdr L)))
   ;test if atom = f
   ((eq? (car L)'f) (sum-up-numbers-simple(cdr L)))
   ;test if atom = g
   ((eq? (car L)'g) (sum-up-numbers-simple(cdr L)))
   ;test if atom = h
   ((eq? (car L)'h) (sum-up-numbers-simple(cdr L)))
   ;test if atom = i
   ((eq? (car L)'i) (sum-up-numbers-simple(cdr L)))
   ;test if atom = j
   ((eq? (car L)'j) (sum-up-numbers-simple(cdr L)))
   ;test if atom = k
   ((eq? (car L)'k) (sum-up-numbers-simple(cdr L)))
   ;test if atom = l
   ((eq? (car L)'l) (sum-up-numbers-simple(cdr L)))
   ;test if atom = m
   ((eq? (car L)'m) (sum-up-numbers-simple(cdr L)))
   ;test if atom = n
   ((eq? (car L)'n) (sum-up-numbers-simple(cdr L)))
   ;test if atom = o
   ((eq? (car L)'o) (sum-up-numbers-simple(cdr L)))
   ;test if atom = p
