(define (test L)
;if the list is null, return 0
  (if (null? L)
      0
      ;if the parameter is a list
      (if (list? (car L))
        ;recursively call function with the nested list as parameter
        ;add that value to the remainder of the original list
          (+ (test (car L)) (test (cdr L)))
          ;else add the first value of the list to the remainder values
          (+ (car L) (test (cdr L))))))
