(define (min-above-min L1 L2)
  (cond
   ;if the first list is null, display #f
   ((null? L1) #f)
   ;if the second list is null, display the minimum of the first list
   ((null? L2) (min-list L1))
   (else (second-smallest (min-list L2) L1 ))
  )
) 

(define (min-list lst)
  (cond
   ((null? lst) #f)
   ((null? (cdr lst)) (car lst))
   ((< (car lst) (min-list (cdr lst))) (car lst))
   (else (min-list (cdr lst)))
  )
)  
